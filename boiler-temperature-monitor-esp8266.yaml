esphome:
  name: boiler-temperature-monitor

packages:
  wifi: !include shared-wifi.yaml
  sensor: !include default-esp8266-sensors.yaml

esp8266:
  board: nodemcuv2

<<: !include shared.yaml

dallas:
  - pin: GPIO13

i2c:
  sda: GPIO4
  scl: GPIO5
  frequency: 800khz

sensor:
  - platform: dallas
    address: "0x9a00000015b6a628"
    id: cold_flow
    name: "Cold Inlet Flow Temperature"
  - platform: dallas
    address: "0xdd00000018f2e528"
    id: hot_flow
    name: "Upstairs Hot Flow Temperature"
  - platform: dallas
    address: "0x49000000197b5a28"
    id: rad_flow
    name: "Radiator Flow Temperature" 
  - platform: dallas
    address: "0x3d00000016c0b128"
    id: rad_return
    name: "Radiator Return Temperature"
  - platform: dallas
    address: "0x38000000192aba28"
    id: tank_flow
    name: "Hot Water Cylinder Flow Temperature" 
  - platform: dallas
    address: "0x5200000016a13228"
    id: tank_return    
    name: "Hot Water Cylinder Return Temperature"

binary_sensor:
  - platform: gpio
    id: page_switch_button
    pin:
      number: GPIO0
      mode:
        input: true
        pullup: true 
      inverted: true
    on_press:
      then:
        - display.page.show_next: temp_display

font:
  - file: "./fonts/ter-u12n.bdf"
    id: small
  - file: "./fonts/ter-u32b.bdf"
    id: large

display:
  - platform: ssd1306_i2c
    id: temp_display
    model: "SSD1306 128x64"
    address: 0x3C
    pages:
      - id: summary
        lambda: |-
          it.print(0, 2, id(small), "Temperatures");
          
      
          /* //Debugging bounding box
          it.line(0,0,127,0);
          it.line(127,0,127,63);
          it.line(127,63,0,63);
          it.line(0,63,0,0);
          */

          int pipes = 6;
          int pipes_per_column = 2;

          int header_height = 16;
          int font_height = 12;
          int wpp = (it.get_width()) / (pipes / pipes_per_column);
          int hpp = ((it.get_height() - 16) / 2) - 3;
          int marginx = 5; 
          int marginy = 7;

          // render each temperature inside little pipe lines in a 3x2 grid
          for (int i = 0; i < 6; i++) {
            int column = (i/2) % (pipes / pipes_per_column);
            int row = i % pipes_per_column;

            int leftx = (wpp * column);
            int rightx = leftx + wpp - marginx;
            int topy = header_height + (hpp * row) + (marginy / 2);
            int bottomy = topy + hpp - marginy;
            it.line(leftx, topy, rightx, topy);
            it.line(leftx, bottomy, rightx, bottomy);

            int tx = leftx;
            int ty = topy + 2;
            float sensor_val = 0;
            String sensor_flag;

            switch (i) {
              case 0: sensor_val = id(cold_flow).state; sensor_flag = "CF"; break;
              case 1: sensor_val = id(hot_flow).state; sensor_flag = "HF"; break;
              case 2: sensor_val = id(rad_flow).state; sensor_flag = "RF"; break;
              case 3: sensor_val = id(rad_return).state; sensor_flag = "RR"; break;
              case 4: sensor_val = id(tank_flow).state; sensor_flag = "TF"; break;
              case 5: sensor_val = id(tank_return).state; sensor_flag = "TR"; break;
            }
 
            it.printf(tx, ty, id(small), "%s%2.1f", sensor_flag.c_str(), sensor_val);
          }
      - id: cold
        lambda: |-
          it.print(0, 0, id(small), "Cold Flow");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(cold_flow).state); 
      - id: hot
        lambda: |-
          it.print(0, 0, id(small), "Hot Flow");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(hot_flow).state); 
      - id: rf
        lambda: |-
          it.print(0, 0, id(small), "Radiator Flow");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(rad_flow).state);
      - id: rr
        lambda: |-
          it.print(0, 0, id(small), "Radiator Return");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(rad_return).state);
      - id: tf
        lambda: |-
          it.print(0, 0, id(small), "Tank Flow");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(tank_flow).state);
      - id: tr
        lambda: |-
          it.print(0, 0, id(small), "Tank Return");
          it.printf(it.get_width()/2, (it.get_height()/2)+4, id(large), TextAlign::CENTER, "%2.2fc", id(tank_return).state);
          
      

